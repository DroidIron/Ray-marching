#version 330 core
out vec4 frag_color;

uniform vec2 screen_size;
uniform float time;

// Camera:
uniform vec3 camera_position;
uniform vec3 camera_direction;
uniform vec3 camera_up;
uniform vec3 camera_right;
uniform vec2 mouse;

// Settings:
float step_limit = 80;
float fov = 1;

float distance_to_object(vec3 point);
float sdf_sphere(vec3 point, vec3 sphere_position, float radius);
float sdf_box(vec3 point, vec3 box_size, vec3 box_position);
float op_smooth_union(float o1, float o2, float k);
float op_smooth_subtraction(float o1, float o2, float k);
float op_subtraction(float d1, float d2);
mat2 rotate_2d(float angle);
float sdf_lava_light(vec3 point, vec3 sphere_position, float radius);
float hash(float n);
vec3 random_offset(vec3 cell);
vec3 drop_position(vec3 cell, float cell_size, float fall_speed);

void main()
{
    // NDC:
    vec2 uv = (gl_FragCoord.xy * 2.0 - screen_size.xy) / screen_size.y; // Screen
    vec2 m = (mouse.xy * 2.0 - screen_size.xy) / screen_size.y; // Mouse

    // Ray origin & ray direction:
    vec3 ray_origin = camera_position * fov;
    vec3 ray_direction = normalize(uv.x * camera_right + uv.y * camera_up + camera_direction);
    vec3 col = vec3(0); // Current pixels color.

    float distance_traveled = 0.0;

    // Camera y:
    ray_origin.yz *= rotate_2d(-m.y * 2);
    ray_direction.yz *= rotate_2d(-m.y * 2);

    // Camera x:
    ray_origin.xz *= rotate_2d(-m.x * 2);
    ray_direction.xz *= rotate_2d(-m.x * 2);

    for (int i = 0; i < step_limit; i++)
    {
        // Ray marching:
        vec3 point = ray_origin + ray_direction * distance_traveled; // Position along the ray

        // Distance to closes object:
        float distance = distance_to_object(point);
        distance_traveled += distance;

        if (distance < 0.001) {break;}
        if (distance > 100) {break;}
    }

    vec3 lavaEmission = vec3(1.0, 0.3, 0.1);
    float glow = exp(-distance_traveled * 0.1);
    col = lavaEmission * glow;

    frag_color = vec4(col, 1.0);
}

float distance_to_object(vec3 point)
{
    float d = 1e6;
    float cellSize = 10.0;  // Adjust cell size for density of drops.
    float fallSpeed = 1.0;  // Adjust fall speed.

    vec3 baseCell = floor(point / cellSize);

    // Loop over nearby cells:
    for (int z = -1; z <= 1; z++) {
        for (int y = -1; y <= 1; y++) {
            for (int x = -1; x <= 1; x++) {
                vec3 cell = baseCell + vec3(x, y, z);
                vec3 drop_pos = drop_position(cell, cellSize, fallSpeed);
                float d_drop = sdf_lava_light(point, drop_pos, 2.0);
                d = min(d, d_drop);
            }
        }
    }

    return d;
}

float sdf_sphere(vec3 point, vec3 sphere_position, float radius)
{
    return length(point - sphere_position) - radius;
}

float sdf_box(vec3 point, vec3 box_size, vec3 box_position)
{
    vec3 q = abs(point - box_position) - box_size;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float op_smooth_union(float o1, float o2, float k)
{
    float h = clamp(0.5 + 0.5 * (o2 - o1)/k, 0.0, 1.0);
    return mix(o2, o1, h) - k * h * (1.0 - h);
}

float op_smooth_subtraction(float o1, float o2, float k)
{
    float h = clamp(0.5 - 0.5 * (o2 + o1)/k, 0.0, 1.0);
    return mix(o2, -o1, h) + k * h * (1.0 - h);
}

float op_subtraction(float d1, float d2)
{
    return max(-d1, d2);
}

mat2 rotate_2d(float angle)
{
    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
}

float sdf_lava_light(vec3 point, vec3 sphere_position, float radius)
{
    float noise = sin(point.x * 10.0 + time * 7.0)
                * sin(point.y * 10.0 + time * 5.0)
                * 0.3;  

    return length(point - sphere_position) - (radius + noise);
}

float hash(float n)
{
    return fract(sin(n) * 43758.5453);
}

vec3 random_offset(vec3 cell)
{
    float h = hash(cell.x + cell.y*57.0 + cell.z*131.0);
    vec3 offset;
    offset.x = fract(sin(cell.x * 12.9898 + h * 78.233));
    offset.y = fract(sin(cell.y * 93.9898 + h * 47.233));
    offset.z = fract(sin(cell.z * 17.9898 + h * 67.233));
    return offset - 0.5;
}

vec3 drop_position(vec3 cell, float cell_size, float fall_speed)
{
    vec3 pos = cell * cell_size + random_offset(cell) * cell_size;
    pos.y -= mod(time * fall_speed, cell_size);
    return pos;
}