#version 330 core
out vec4 frag_color;

uniform vec2 screen_size;
uniform float time;

// Camera:
uniform vec3 camera_position;
uniform vec3 camera_direction;
uniform vec3 camera_up;
uniform vec3 camera_right;
uniform vec2 mouse;

// Settings:
float step_limit = 100;
float fov = 1;

float distance_to_object(vec3 point);
float sdf_sphere(vec3 point, vec3 sphere_position, float radius);
float sdf_box(vec3 point, vec3 box_size, vec3 box_position);
float op_smooth_union(float o1, float o2, float k);
float op_smooth_subtraction(float o1, float o2, float k);
float op_subtraction(float d1, float d2);
mat2 rotate_2d(float angle);

void main()
{
    // NDC:
    vec2 uv = (gl_FragCoord.xy * 2.0 - screen_size.xy) / screen_size.y; // Screen
    vec2 m = (mouse.xy * 2.0 - screen_size.xy) / screen_size.y; // Mouse

    // Ray origin & ray direction:
    vec3 ray_origin = vec3(camera_position.x, camera_position.y, camera_position.z - 3) * fov;
    vec3 ray_direction = normalize(uv.x * camera_right + uv.y * camera_up + camera_direction);
    vec3 col = vec3(0); // Current pixels color.

    float distance_traveled = 0.0;

    // Camera y:
    ray_origin.yz *= rotate_2d(-m.y * 2);
    ray_direction.yz *= rotate_2d(-m.y * 2);

    // Camera x:
    ray_origin.xz *= rotate_2d(-m.x * 2);
    ray_direction.xz *= rotate_2d(-m.x * 2);

    float hitDistance = 0.0;
    bool hit = false;
    for (int i = 0; i < step_limit; i++) {
        vec3 point = ray_origin + ray_direction * distance_traveled;
        float d = distance_to_object(point);
        distance_traveled += d;

        if (d < 0.001) {
            hit = true;
            hitDistance = distance_traveled;
            break;
        }
        if (d > 100.0) { break; }
    }

    vec3 finalColor = vec3(0.0);
    if (hit) {
        float edge = smoothstep(0.0, 0.005, abs(distance_to_object(ray_origin + ray_direction * hitDistance)));
        vec3 edgeColor = vec3(1.0, 0.2, 0.2);
        vec3 baseColor = vec3(hitDistance * 0.10);
        finalColor = mix(baseColor, edgeColor, edge);
    } else {
        // No hit: set a background color
        finalColor = vec3(0.5, 0.5, 0.7);
    }

    frag_color = vec4(finalColor, 1.0);

}

float distance_to_object(vec3 point)
{
    float box = sdf_box(point, vec3(5, 5, 1.5), vec3(0));
    float sphere = sdf_sphere(point, vec3(0, 0, sin(time / 4) * 4), 2);

    return op_smooth_subtraction(sphere, box, 3);
}

float sdf_sphere(vec3 point, vec3 sphere_position, float radius)
{
    return length(point - sphere_position) - radius;
}

float sdf_box(vec3 point, vec3 box_size, vec3 box_position)
{
    vec3 q = abs(point - box_position) - box_size;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float op_smooth_union(float o1, float o2, float k)
{
    float h = clamp(0.5 + 0.5 * (o2 - o1)/k, 0.0, 1.0);
    return mix(o2, o1, h) - k * h * (1.0 - h);
}

float op_smooth_subtraction(float o1, float o2, float k)
{
    float h = clamp(0.5 - 0.5 * (o2 + o1)/k, 0.0, 1.0);
    return mix(o2, -o1, h) + k * h * (1.0 - h);
}

float op_subtraction(float d1, float d2)
{
    return max(-d1, d2);
}

mat2 rotate_2d(float angle)
{
    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
}